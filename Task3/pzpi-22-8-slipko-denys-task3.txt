Міністерство освіти та науки України Харківський національний університет радіоелектроніки


Кафедра ПІ



Звіт
З лабораторної роботи 3
Тема роботи: «РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ»
з дисципліни «Аналіз та рефакторинг коду»






Виконав:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Сліпко Д.В	 











Харків 2024
 
Мета роботи: На лабораторній роботі №2 потрібно розробити бізнес-логику та функції адміністрування серверної частини  програмної системи.
Хід роботи: 
Під час виконання лабораторної роботи була створена серверна частина програмної системи для керування громадським транспортом. Реалізовано функції адміністрування, які охоплюють управління маршрутами, зупинками, транспортними засобами та користувачами. Система підтримує розмежування ролей, що дозволяє адміністраторам переглядати списки користувачів, маршрутів, зупинок і транспортних засобів, а також додавати, редагувати та видаляти відповідні записи в базі даних.
 Для забезпечення безпеки реалізовано автентифікацію та авторизацію за допомогою JWT-токенів. Додатково впроваджено middleware для перевірки прав доступу, що обмежує виконання адміністративних функцій тільки для користувачів із відповідними правами.
Взаємодія з базою даних Microsoft SQL Server здійснюється через SQL-запити для роботи з таблицями користувачів, маршрутів, зупинок та транспортних засобів. Проведено тестування всіх функцій для перевірки їхньої працездатності та стабільності.
1.	Текстовий опис інженерних рішень
Серверна частина системи керування громадським транспортом побудована на основі Node.js з використанням Express.js та бази даних Microsoft SQL Server. Основні компоненти включають маршрути для обробки запитів, контролери для реалізації бізнес-логіки та моделі для взаємодії з базою даних.
Маршрути забезпечують обробку запитів до API, дозволяючи керувати маршрутами, зупинками, транспортними засобами та користувачами, включаючи перегляд, додавання, оновлення та видалення записів. Контролери виконують перевірку даних та SQL-запити для взаємодії з таблицями, такими як Users, Routes, Stops, Vehicles та Vehicle_Locations.
Для забезпечення безпеки реалізовано механізм автентифікації та авторизації за допомогою JWT-токенів, а middleware виконує перевірку прав доступу, що обмежує виконання адміністративних функцій лише для користувачів із відповідними привілеями.

2.	Фрагменти програмного коду:
	Бізнес логіки (математичних методів обробки даних) серверної частини; 
-- Оновлення при додаванні транспорту
CREATE TRIGGER UpdateRouteLoadOnInsert
ON Vehicles
AFTER INSERT
AS
BEGIN
    UPDATE Routes
    SET load_factor = (SELECT COUNT(*) FROM Vehicles WHERE Vehicles.route_id = Routes.id)
    WHERE id IN (SELECT route_id FROM inserted);
END;
GO

-- Оновлення при видаленні транспорту
CREATE TRIGGER UpdateRouteLoadOnDelete
ON Vehicles
AFTER DELETE
AS
BEGIN
    UPDATE Routes
    SET load_factor = (SELECT COUNT(*) FROM Vehicles WHERE Vehicles.route_id = Routes.id)
    WHERE id IN (SELECT route_id FROM deleted);
END;
GO
	Адміністрування серверної частини.
Функція для показу та видалення користувачів 
router.get("/users", authMiddleware, isAdmin, async (req, res) => {
    try {
        const result = await sql.query`SELECT id, username, role FROM Users`;
        res.json(result.recordset);
    } catch (error) {
        console.error("Помилка отримання користувачів:", error);
        res.status(500).json({ error: "Помилка сервера" });
    }
});

router.delete("/users/:id", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        await sql.query`DELETE FROM Users WHERE id = ${id}`;
        res.status(200).json({ message: "Користувач видалено" });
    } catch (error) {
        console.error("Помилка видалення користувача:", error);
        res.status(500).json({ error: "Помилка сервера" });
    }
});

Функція для показу та видалення транспорту
router.get("/vehicles", authMiddleware, isAdmin, async (req, res) => {
    try {
        const result = await sql.query`SELECT * FROM Vehicles`;
        res.json(result.recordset);
    } catch (error) {
        res.status(500).json({ error: "Помилка сервера" });
    }
});

router.post("/vehicles", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { route_id, type, number, status } = req.body;
        if (!route_id || !type || !number || !status) {
            return res.status(400).json({ error: "Усі поля обов'язкові" });
        }

        await sql.query`
            INSERT INTO Vehicles (route_id, type, number, status)
            VALUES (${route_id}, ${type}, ${number}, ${status})`;
        res.status(201).json({ message: "Транспорт успішно доданий" });
    } catch (error) {
        console.error("Помилка додавання транспорту:", error);
        res.status(500).json({ error: "Помилка сервера" });
    }
});

Висновки: У процесі розробки серверної частини системи керування громадським транспортом було реалізовано функції для управління маршрутами, зупинками, транспортними засобами та користувачами, а також систему адміністрування доступу з розмежуванням ролей. Використання бази даних Microsoft SQL Server дозволило ефективно зберігати та обробляти дані про маршрути, транспортні засоби та користувачів, забезпечуючи цілісність та зв’язність інформації. Реалізовані автентифікація та авторизація через JWT-токени, що гарантує безпеку доступу до адміністративних функцій, обмежуючи можливості звичайних користувачів у системі. Адміністраторам надано можливість керувати всіма ресурсами, включаючи додавання, видалення та перегляд даних про маршрути, транспорт і користувачів. Усі адміністративні функції документовані через Swagger, що забезпечує прозорість API та зручність тестування.
Посилання на відео: 

ДОДАТОК А
 
Рисунок 1 – UML діаграма діяльності










ДОДАТОК Б
UML діаграма взаємодії
 
Рисунок 2 – UML діаграма взаємодії
