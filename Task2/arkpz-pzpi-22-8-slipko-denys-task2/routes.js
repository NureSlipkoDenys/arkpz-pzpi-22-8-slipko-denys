const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { sql } = require("./db");

const router = express.Router();
router.use(express.json());

/**
 * @swagger
 * tags:
 *   - name: Public
 *     description: –î–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
 */
/** ---------- üìå PUBLIC ROUTES (–ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó) ---------- **/
/**
 * @swagger
 * /auth/register:
 *   post:
 *     summary: –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 *     tags: [Public]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *               password:
 *                 type: string
 *               role:
 *                 type: string
 *     responses:
 *       201:
 *         description: –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
 */
router.post("/auth/register", async (req, res) => {
    try {
        const { username, password } = req.body;
        if (!username || !password) {
            return res.status(400).json({ error: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        const existingUser = await sql.query`SELECT * FROM Users WHERE username = ${username}`;
        if (existingUser.recordset.length > 0) {
            return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        await sql.query`
            INSERT INTO Users (username, password_hash, role)
            VALUES (${username}, ${hashedPassword}, 'user')`;

        res.status(201).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π" });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /auth/login:
 *   post:
 *     summary: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 *     tags: [Public]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
 */
router.post("/auth/login", async (req, res) => {
    try {
        const { username, password } = req.body;
        if (!username || !password) {
            return res.status(400).json({ error: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
        }

        const result = await sql.query`SELECT * FROM Users WHERE username = ${username}`;
        const user = result.recordset[0];

        if (!user || !(await bcrypt.compare(password, user.password_hash))) {
            return res.status(401).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å" });
        }

        res.json({ message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞" });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

module.exports = router;
