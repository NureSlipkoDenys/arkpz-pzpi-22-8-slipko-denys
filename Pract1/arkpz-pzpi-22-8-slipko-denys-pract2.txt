Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ



Звіт з практичного заняття №2
з дисципліни «Аналіз та рефакторинг коду»



Виконав: 
ст. гр. ПЗПІ-22-8
Сліпко Д.В

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П.



Харків 2024



1. Мета роботи:
Навчити студентів основним методам рефакторингу коду на основі реальних прикладів з їхніх власних програмних проєктів. Студенти повинні навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

2. Завдання
Студент повинен обрати 3 метода рефакторингу з книги  Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. – 416 с.Навести приклади свого особистого коду (з курсових, лабораторних або інших проєктів), який потребує покращення, та продемонструвати застосування обраних методів. 3).
Кожен метод рефакторингу повинен супроводжуватись:
Описом проблеми, яку вирішує даний метод.
Кодом до і після застосування методу рефакторингу.
Поясненням переваг використаного методу.

3. Хід роботи
Було обрано 3 методи рефакторингу. У презентації (Додаток Б) наведено приклади свого особистого коду, який потребує покращення, та застосування обраних методів.

Висновки

У процесі виконання практичної роботи були вивчені три методи рефакторингу з книги Мартіна Роберта "Чистий код", які допомогли покращити якість коду. Для кожного методу було продемонстровано реальні приклади з особистих проєктів, що дозволило зрозуміти, як правильно ідентифікувати проблеми в коді та застосовувати відповідні методи для їх вирішення. Рефакторинг значно підвищує зрозумілість, ефективність та підтримуваність програмного коду.

Відео-презентація: 


ДОДАТОК А 
Програмний код, використаний як приклад у презентації. 
// Метод 1 – Push Down Field
class Employee { 
protected: 
 double salesBonus; // Це поле 
потрібно лише для менеджерів 
}; 
class Manager : public Employee {}; 
class Developer : public Employee {}; // 
Developer не використовує salesBonus 
// Після рефакторингу 
class Employee {}; // Базовий клас 
залишається чистим 
class Manager : public Employee { 
private: 
 double salesBonus; 
}; 
class Developer : public Employee {}; // 
Не містить зайвих полів 
// Метод 2 – Replace Delegation with 
Inheritance
class Engine { 
public: 
 void start() { 
 // Логіка запуску двигуна 
 } 
}; 
class Car { 
private: 
 Engine engine; 
public: 
 void start() { 
 engine.start(); // Делегування 
виклику 
 } 
}; 
// Після рефакторингу 
class Engine { 
public: 
 void start() { 
 // Логіка запуску двигуна 
 } 
}; 
class Car : public Engine { 
public: 
 void drive() { 
 start(); // Тепер можна викликати 
start() без делегування 
 } 
}; 
// Метод 3 – Replace Subclass with 
Fields
class Car { 
public: 
 virtual std::string getType() = 0; 
}; 
class Sedan : public Car { 
public: 
 std::string getType() override { 
 return "Sedan"; 
 } 
}; 
class SUV : public Car { 
public: 
 std::string getType() override { 
 return "SUV"; 
 } 
}; 
// Після рефакторингу 
class Car { 
private: 
 std::string type; 
public: 
 Car(std::string t) : type(t) {} 
 std::string getType() { 
 return type; 
 } 
}; 


ДОДАТОК Б

Презентація на тему «Методи рефакторингу коду програмного забезпечення»

Методи рефакторингу коду програмного забезпечення

виконав Студент ПЗПІ 22-8
Сліпко Д.В

Мета роботи:

Ознайомитися з основними методами рефакторингу коду, розглянути їх застосування на прикладах та зрозуміти, як вони допомагають покращити структуру програмного забезпечення.
Основні завдання:
	- Дослідити поняття рефакторингу та його роль у розробці програм.
	- Розглянути три методи рефакторингу з книги Роберта Мартіна "Чистий код".
	- Продемонструвати їх практичне застосування у C++.
	- Пояснити, як ці методи спрощують код, зменшують дублювання та покращують підтримку програмного забезпечення.
 Рефакторинг дозволяє зробити код більш читабельним, ефективним та легким для масштабування.


Метод 1 – Push Down Field
Опис проблеми:
Батьківський клас містить поля, які використовуються лише в деяких підкласах.
Надлишкові поля роблять базовий клас занадто складним та перевантаженим зайвою логікою.
Порушується принцип єдиної відповідальності (SRP), оскільки клас містить дані, які йому не потрібні.

Код до рефакторингу

Проблема:
Поле salesBonus зайве у класі Developer, що ускладнює розуміння коду.
Якщо у проєкті з’являться нові підкласи, вони теж будуть отримувати непотрібні дані.

Код після рефакторингу

Переваги:

Батьківський клас стає чистішим і не містить зайвих полів.
Підкласи отримують тільки ті дані, які їм потрібні.
Зменшується складність коду, що полегшує підтримку.
Метод 2 – Replace Delegation with Inheritance
Опис проблеми:
Клас використовує делегування (композицію), коли успадкування могло б спростити код.
Всі методи одного класу просто передають виклики іншому класу без додавання нової логіки.
Це ускладнює код та додає зайві рівні абстракції.

Код до рефакторингу

Проблема:
Клас Car просто передає виклики Engine, не додаючи нової логіки.
Зайва композиція ускладнює код, адже можна успадкувати Engine і отримати той самий ефект.

Код після рефакторингу

Переваги:

Видаляється зайва композиція, що зменшує кількість коду.
Використання успадкування робить код простішим та легшим для читання.
Спрощується взаємодія між класами без втрати функціональності.
Метод 3 – Replace Subclass with Fields
Опис проблеми:
У коді є надлишкові підкласи, які відрізняються лише одним або кількома параметрами.
Додавання нових варіантів класу потребує створення нових підкласів, що збільшує кількість коду та ускладнює підтримку.

Код до рефакторингу

Проблема:
Якщо потрібно додати новий тип автомобіля, доведеться створювати новий підклас.
Це призводить до зайвого розростання коду, що ускладнює підтримку.

Код після рефакторингу

Переваги:

Код стає гнучкішим – тепер можна додавати нові типи авто без створення нових класів.
Менше дублювання, легше масштабувати та змінювати код.
Зменшується складність, полегшується підтримка проєкту.

ВИСНОВОК

Рефакторинг коду – це необхідний процес для підтримки чистоти, гнучкості та ефективності програмного забезпечення. Використання правильних методів дозволяє зменшити дублювання коду, покращити читабельність та спростити майбутні зміни.

Розглянуті методи:
-  Push Down Field допомагає позбутися зайвих полів у батьківському класі, роблячи його більш узагальненим.
-  Replace Delegation with Inheritance усуває зайві рівні абстракції та спрощує взаємодію між класами.
-  Replace Subclass with Fields зменшує кількість непотрібних підкласів, підвищуючи гнучкість коду.

Застосування цих підходів робить систему легшою для підтримки, розширення та адаптації. Чистий код – це ключ до ефективної та стійкої розробки програмного забезпечення.

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ
Мартін Р. – "Чистий код: створення і рефакторинг за допомогою AGILE", ФАБУЛА, 2019. – 416 с.
Fowler M. – "Refactoring: Improving the Design of Existing Code", Addison-Wesley, 2018.
Gamma E., Helm R., Johnson R., Vlissides J. – "Design Patterns: Elements of Reusable Object-Oriented Software", Addison-Wesley, 1994.

