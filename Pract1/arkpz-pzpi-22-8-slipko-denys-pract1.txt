Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ



Звіт з практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»



Виконав: 
ст. гр. ПЗПІ-22-8
Сліпко Д.В

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П.



Харків 2024



1. Мета роботи:
Ознайомитися з рефакторінгом коду на обраній мові програмування. Набути навичок з рефакторінгу коду для покращення якості.

2. Завдання
Обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.

3. Хід роботи
Було обрано мову програмування C++. У презентації (Додаток Б) наведено основні рекомендації щодо оформлення програмного коду з описами, а також приклад коду (Додаток А) до і після застосування цих рекомендацій.

Висновки

У ході практичної роботи було вивчено рефакторинг коду на мові C++, зокрема рекомендації щодо покращення читабельності, організації функцій та іменування змінних. На прикладах коду було продемонстровано, як ці рекомендації покращують структуру та ефективність програми. Рефакторинг допомагає знизити кількість помилок і підвищити підтримуваність коду.

Відео-презентація: https://www.youtube.com/watch?v=brNm2z0NA_k

ДОДАТОК А

// Поганий приклад
int foo(int a,int b){return a+b;}
// Гарний приклад
int Foo(int a, int b) { 
 return a + b; 
}
// Поганий приклад
int x = 100; 
void f() { 
 int y = x * 2; 
}

// Гарний приклад
int baseSalary = 100; 
void CalculateTotalSalary() { 
 int totalSalary = baseSalary * 2; 
}

// Поганий приклад
double price = 200 * 0.85; // Що таке 0.85?
// Гарний приклад

const double DISCOUNT_RATE = 0.85; 
double price = 200 * DISCOUNT_RATE;

// Поганий приклад
int maxSpeed = 120; 
maxSpeed = 150; // Випадкова зміна значення

// Гарний приклад
const int MAX_SPEED = 120; 
// MAX_SPEED тепер не можна змінити випадково

// Поганий приклад
int* data = new int(5); 
delete data; // Легко забути викликати delete

// Гарний приклад
std::unique_ptr<int> data = std::make_unique<int>(5); 
// delete викликається автоматично при виході з області видимості

// Поганий приклад
enum Color { Red, Green, Blue }; 
enum Status { Active, Inactive }; 
Color c = Active; // Помилка: немає захисту від змішування

// Гарний приклад
enum class Color { Red, Green, Blue }; 
enum class Status { Active, Inactive }; 
Color c = Color::Red; // Чітке і безпечне використання

// Поганий приклад
int* ptr = NULL; 
if (ptr == 0) { 
 // Неочевидне порівняння 
}

// Гарний приклад
int* ptr = nullptr; 
if (ptr == nullptr) { 
 // Код читається однозначно 
}

// Поганий приклад
using namespace std; 
string name = "John"; 
cout << "Hello, " << name << endl;

// Гарний приклад
#include <iostream> 
#include <string> 
std::string name = "John"; 
std::cout << "Hello, " << name << std::endl;

ДОДАТОК Б

Презентація на тему «Основні рекомендації для ефективного написання коду 
на C++».



РЕКОМЕНДАЦІЯ 1: ДОТРИМУЙТЕСЯ ЄДИНОГО СТИЛЮ ОФОРМЛЕННЯ КОДУ
Опис: Чітка структура та єдиний стиль форматування коду допомагають уникнути плутанини, спростити налагодження та зменшити кількість помилок.
Чому це важливо: Дотримання єдиного стилю підвищує читабельність, підтримуваність та якість коду.

РЕКОМЕНДАЦІЯ 2: ВИКОРИСТОВУЙТЕ ОСМИСЛЕНІ НАЗВИ ЗМІННИХ І ФУНКЦІЙ
Опис: Назви змінних, функцій та класів повинні чітко відображати їхнє призначення.
Чому це важливо: Чіткі та осмислені назви змінних і функцій покращують читабельність коду та спрощують його підтримку.

РЕКОМЕНДАЦІЯ 3: УНИКАЙТЕ МАГІЧНИХ ЧИСЕЛ У КОДІ
Опис: "Магічні числа" — це числові значення, які з’являються в коді без пояснення їхнього призначення.
Чому це важливо: Такий підхід робить код інтуїтивно зрозумілим і спрощує внесення змін у майбутньому.

РЕКОМЕНДАЦІЯ 4: ВИКОРИСТОВУЙТЕ const ДЛЯ НЕЗМІННИХ ДАНИХ
Опис: Змінні, значення яких не повинно змінюватися після ініціалізації, слід позначати ключовим словом const.
Чому це важливо: Використання const робить код безпечнішим та інтуїтивно зрозумілим.

РЕКОМЕНДАЦІЯ 5: ВИКОРИСТОВУЙТЕ РОЗУМНІ ВКАЗІВНИКИ ЗАМІСТЬ new ТА delete
Опис: Ручне керування пам’яттю через new і delete може призводити до витоків пам’яті та інших помилок.
Чому це важливо: Розумні вказівники допомагають уникати витоків пам’яті та роблять код надійнішим.

РЕКОМЕНДАЦІЯ 6: ВИКОРИСТОВУЙТЕ enum class ЗАМІСТЬ ЗВИЧАЙНИХ enum
Опис: enum class запобігає неявному приведенню до int та уникненню конфліктів імен.
Чому це важливо: Використання enum class підвищує безпеку коду та унеможливлює випадкові помилки.

РЕКОМЕНДАЦІЯ 7: ВИКОРИСТОВУЙТЕ nullptr ЗАМІСТЬ NULL І 0
Опис: nullptr чітко визначає нульовий вказівник і покращує типову безпеку.
Чому це важливо: Використання nullptr запобігає неоднозначності та покращує типову безпеку коду.

РЕКОМЕНДАЦІЯ 8: УНИКАЙТЕ ВИКОРИСТАННЯ using namespace std;
Опис: Глобальне використання using namespace std; може спричинити конфлікти імен у великих проєктах.
Чому це важливо: Такий підхід уникне конфліктів та зробить код чіткішим і безпечнішим.

ВИСНОВОК:
Дотримання правил написання коду в C++ робить програми зрозумілими, безпечними та легкими для підтримки. Використання структурованих стилів оформлення, сучасних можливостей мови та безпечних підходів до роботи з пам’яттю дозволяє уникати помилок і покращувати продуктивність.

Основні принципи хорошого коду:
- Читабельність – зрозумілі назви змінних, єдиний стиль форматування.
- Безпека – використання const, nullptr, enum class, уникнення магічних чисел.
- Ефективність – розумне керування пам’яттю через std::unique_ptr, std::shared_ptr.
- Захист від помилок – дотримання сучасних стандартів C++.

Дотримання цих рекомендацій допоможе підвищити якість коду, зменшити ризики помилок і зробити розробку ефективнішою.

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ
Б'єрн Страуструп – "Принципи та практика використання C++", 2-ге видання, Pearson, 2014.
Скотт Мейерс – "Ефективний C++: 55 конкретних способів покращити свій код", 3-тє видання, Addison-Wesley, 2005.
Герб Саттер, Андрій Александреску – "Сучасний C++: Дизайн та еволюція", Addison-Wesley, 2004.
ISO/IEC 14882:2020 – Офіційний стандарт C++ (C++20).
