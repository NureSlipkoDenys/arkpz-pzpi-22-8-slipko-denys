Міністерство освіти та науки України Харківський національний університет радіоелектроніки


Кафедра ПІ



Звіт
З лабораторної роботи 5
Тема роботи: «РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ»
з дисципліни «Аналіз та рефакторинг коду»






Виконав:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Сліпко Д.В	 











Харків 2024
 
Мета роботи: На лабораторній роботі №5 потрібно розгорнути програмну систему та продемонструвати її роботу.
Хід роботи: 
У процесі виконання роботи було розгорнуто програмну систему для моніторингу громадського транспорту, яка отримує GPS-координати транспортних засобів та передає їх на сервер через MQTT. Система успішно інтегрована з брокером MQTT, забезпечуючи стабільну передачу зібраних даних на сервер для подальшого аналізу та зберігання.
Отримані дані формуються у форматі JSON та публікуються у визначений MQTT-топік. Серверна частина коректно обробляє ці повідомлення, оновлюючи базу даних у режимі реального часу. Це підтверджує стабільну роботу всієї системи та її ефективну інтеграцію з IoT-клієнтом.
Вимоги середовища та компоненти:
1.	Мікроконтролер: ESP32 з прошивкою для роботи з GPS-модулем та MQTT.
2.	Датчики: GPS-модуль для отримання координат транспортного засобу.
3.	Програмні бібліотеки:
•	Arduino IDE з бібліотеками для роботи з MQTT (PubSubClient) та GPS.
•	Сервер MQTT (наприклад, HiveMQ або Mosquitto) для обробки повідомлень.
4.	Серверна інфраструктура:
•	Сервер для розгортання MQTT-брокера та бази даних.
•	Microsoft SQL Server для зберігання координат транспорту.
5.	Мережа: Wi-Fi для підключення IoT-клієнта до брокера.
6.	Користувацьке середовище: Веб-додаток або REST API для перегляду отриманих даних у реальному часі.
7.	База даних: Microsoft SQL Server.
Інструменти та технології:
1.	Апаратна частина:
•	ESP32: Для керування GPS-модулем і передачі даних через Wi-Fi.
•	GPS-модуль: Для отримання координат транспортного засобу.
2.	Програмні інструменти та середовища:
•	Visual Studio Code: Для розробки серверної частини та документування  проекту.
3.	Програмні бібліотеки:
•	PubSubClient: Для інтеграції ESP32 з MQTT-брокером.
•	TinyGPS++: Для роботи з GPS-модулем.
4.	Протоколи і мережі:
•	Wi-Fi: Для з’єднання ESP32 з мережею.
•	MQTT: Легкий протокол для обміну даними між IoT-клієнтом і сервером.
5.	Серверна частина:
•	HiveMQ або Mosquitto (MQTT-брокер): Для обробки та пересилки даних між IoT-клієнтом і сервером.
•	Microsoft SQL Server: Для зберігання отриманих GPS-координат.
•	Node.js (Express.js): Для реалізації серверної логіки та API.
6.	Інструменти тестування і налагодження:
•	Serial Monitor в Arduino IDE: Для перевірки роботи ESP32 та налагодження коду.
•	MQTT Explorer: Для перевірки публікацій повідомлень у топіки.
•	Postman або аналогічний інструмент: Для тестування REST API.
7.	Формат даних:
•	JSON: Використовується для передачі координат від IoT-клієнта до сервера.
Висновки: У процесі виконання проєкту була успішно розроблена та розгорнута IoT-система для моніторингу місцезнаходження громадського транспорту в реальному часі. Система забезпечує отримання GPS-координат транспортних засобів, їх обробку на ESP32 та передачу на сервер через MQTT-протокол. Отримані дані зберігаються в базі даних для подальшого аналізу та використання в навігаційних і диспетчерських системах.
Посилання на відео: 
