require("dotenv").config({ path: "./backend/.env" });

const express = require("express");
const cors = require("cors");
const { connectDB } = require("./db");
const setupSwagger = require("./swagger"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º Swagger
const mqtt = require("mqtt");
const { sql } = require("./db");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const PORT = process.env.PORT || 5000;
const mqttClient = mqtt.connect("mqtt://broker.hivemq.com");

// Middleware
app.use(cors());
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
const authRoutes = require("./auth");
const routes = require("./routes");

app.use("/auth", authRoutes);
app.use("/api", routes); // ‚úÖ –í—Å–µ API —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ `/api/...`

// –ü–æ–¥–∫–ª—é—á–∞–µ–º Swagger
setupSwagger(app);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API
app.get("/", (req, res) => {
    res.send("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /api/routes –∏–ª–∏ /api-docs");
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
app.listen(PORT, async () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    await connectDB();

    
});

mqttClient.on("connect", () => {
    console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MQTT-–±—Ä–æ–∫–µ—Ä–∞!");
    mqttClient.subscribe("esp32/gps", (err) => {
        if (!err) {
            console.log("üì° –ü—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ —Ç–æ–ø—ñ–∫ esp32/gps");
        }
    });
});

mqttClient.on("message", async (topic, message) => {
    if (topic === "esp32/gps") {
        try {
            const data = JSON.parse(message.toString());
            const { latitude, longitude } = data;

            // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å, —è–∫—â–æ –≤—ñ–Ω —î
            const result = await sql.query`
                UPDATE Vehicle_Locations
                SET latitude = ${latitude}, longitude = ${longitude}, timestamp = GETDATE()
                WHERE vehicle_id = 1`;

            // –Ø–∫—â–æ –∂–æ–¥–µ–Ω —Ä—è–¥–æ–∫ –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ (–Ω–µ–º–∞—î –∑–∞–ø–∏—Å—É), —Ç–æ–¥—ñ –≤—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π
            if (result.rowsAffected[0] === 0) {
                await sql.query`
                    INSERT INTO Vehicle_Locations (vehicle_id, latitude, longitude, timestamp)
                    VALUES (1, ${latitude}, ${longitude}, GETDATE())`;
                console.log("üìç –ù–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ:", latitude, longitude);
            } else {
                console.log("üì° –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ:", latitude, longitude);
            }

        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î:", error);
        }
    }
});
