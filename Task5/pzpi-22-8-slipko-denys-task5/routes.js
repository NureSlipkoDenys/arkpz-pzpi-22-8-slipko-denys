const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { sql } = require("./db");
const { authMiddleware, isUser, isAdmin } = require("./authMiddleware");

const router = express.Router();
router.use(express.json());

/**
 * @swagger
 * tags:
 *   - name: VehiclesLoc
 *     description: –û–Ω–æ–≤–ª–µ–Ω–Ω—è
 *   - name: Public
 *     description: –î–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
 *   - name: User
 *     description: –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
 *   - name: Admin
 *     description: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
 */
/** ---------- üìå PUBLIC ROUTES (–ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó) ---------- **/
/**
 * 
 * 
/**
 * @swagger
 * /api/vehicle-location:
 *   post:
 *     summary: –û–Ω–æ–≤–ª–µ–Ω–Ω—è GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
 *     tags: [VehiclesLoc]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               vehicle_id:
 *                 type: integer
 *               latitude:
 *                 type: number
 *               longitude:
 *                 type: number
 *     responses:
 *       200:
 *         description: –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ
 *       201:
 *         description: –ù–æ–≤–∏–π –∑–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ
 *       400:
 *         description: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
 *       500:
 *         description: –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
router.post("/vehicle-locations", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { vehicle_id, latitude, longitude } = req.body;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        if (!vehicle_id || !latitude || !longitude) {
            return res.status(400).json({ error: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
        }

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–ø–∏—Å—É
        const result = await sql.query`
            UPDATE Vehicle_Locations
            SET latitude = ${latitude}, longitude = ${longitude}
            WHERE vehicle_id = ${vehicle_id}`;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –±—É–≤ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—è–¥–æ–∫
        if (result.rowsAffected[0] > 0) {
            return res.status(200).json({ message: "–î–∞–Ω—ñ –ª–æ–∫–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ" });
        } else {
            return res.status(404).json({ error: "–õ–æ–∫–∞—Ü—ñ—è –¥–ª—è —Ü—å–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});
/**
* @swagger
 * /auth/register:
 *   post:
 *     summary: –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 *     tags: [Public]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *               password:
 *                 type: string
 *               role:
 *                 type: string
 *     responses:
 *       201:
 *         description: –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
 */
router.post("/auth/register", async (req, res) => {
    try {
        const { username, password, role } = req.body;
        if (!username || !password || !role) {
            return res.status(400).json({ error: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        const existingUser = await sql.query`SELECT * FROM Users WHERE username = ${username}`;
        if (existingUser.recordset.length > 0) {
            return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        await sql.query`
            INSERT INTO Users (username, password_hash, role)
            VALUES (${username}, ${hashedPassword}, ${role})`;

        res.status(201).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π" });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});



/**
 * @swagger
 * /auth/login:
 *   post:
 *     summary: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 *     tags: [Public]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
 */
router.post("/auth/login", async (req, res) => {
    try {
        const { username, password } = req.body;
        if (!username || !password) {
            return res.status(400).json({ error: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
        }

        const result = await sql.query`SELECT * FROM Users WHERE username = ${username}`;
        const user = result.recordset[0];

        if (!user || !(await bcrypt.compare(password, user.password_hash))) {
            return res.status(401).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å" });
        }

        const token = jwt.sign({ id: user.id, username: user.username, role: user.role }, process.env.JWT_SECRET, { expiresIn: "2h" });

        res.json({ token });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


/** ---------- üìå USER ROUTES (–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è) ---------- **/

/**
 * @swagger
 * /auth/me:
 *   get:
 *     summary: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 *     tags: [User]
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 *       401:
 *         description: –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
 */
router.get("/auth/me", authMiddleware, isUser, async (req, res) => {
    try {
        res.json({ id: req.user.id, username: req.user.username, role: req.user.role });
    } catch (error) {
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /routes:
 *   get:
 *     summary: –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç—ñ–≤
 *     tags: [User]
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç—ñ–≤
 *       500:
 *         description: –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
router.get("/routes", authMiddleware, isUser, async (req, res) => {
    try {
        const result = await sql.query`SELECT id, name, start_point, end_point, load_factor FROM Routes`;
        res.json(result.recordset);
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /stops:
 *   get:
 *     summary: –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑—É–ø–∏–Ω–æ–∫
 *     tags: [User]
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ –∑—É–ø–∏–Ω–æ–∫
 *       500:
 *         description: –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
router.get("/stops", authMiddleware, isUser, async (req, res) => {
    try {
        const result = await sql.query("SELECT id, route_id, name, latitude, longitude, order_index FROM Stops");
        res.json(result.recordset);
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑—É–ø–∏–Ω–æ–∫:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /sensor-data:
 *   post:
 *     summary: –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–∞–Ω—ñ –∑ IoT –¥–∞—Ç—á–∏–∫—ñ–≤
 *     tags: [User]
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               vehicle_id:
 *                 type: integer
 *               latitude:
 *                 type: number
 *               longitude:
 *                 type: number
 *               speed:
 *                 type: number
 *     responses:
 *       201:
 *         description: –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ
 *       500:
 *         description: –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
router.post("/sensor-data", authMiddleware, isUser, async (req, res) => {
    try {
        const { vehicle_id, latitude, longitude, speed } = req.body;
        if (!vehicle_id || !latitude || !longitude || !speed) {
            return res.status(400).json({ error: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
        }

        await sql.query`
            INSERT INTO SensorData (vehicle_id, latitude, longitude, speed, timestamp)
            VALUES (${vehicle_id}, ${latitude}, ${longitude}, ${speed}, GETDATE())`;

        res.status(201).json({ message: "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ" });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});



/**
 * @swagger
 * /routes:
 *   post:
 *     summary: –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
 *     tags: [Admin]
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               start_point:
 *                 type: string
 *               end_point:
 *                 type: string
 *     responses:
 *       201:
 *         description: –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π
 */
router.post("/routes", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { name, start_point, end_point } = req.body;
        if (!name || !start_point || !end_point) {
            return res.status(400).json({ error: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
        }

        await sql.query`
            INSERT INTO Routes (name, start_point, end_point, load_factor)
            VALUES (${name}, ${start_point}, ${end_point}, 0)`;

        res.status(201).json({ message: "–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π", load_factor: 0 });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /routes/{id}:
 *   delete:
 *     summary: –í–∏–¥–∞–ª–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
 *     tags: [Admin]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: –ú–∞—Ä—à—Ä—É—Ç –≤–∏–¥–∞–ª–µ–Ω–æ
 */
router.delete("/routes/:id", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        await sql.query`DELETE FROM Routes WHERE id = ${id}`;
        res.status(200).json({ message: "–ú–∞—Ä—à—Ä—É—Ç –≤–∏–¥–∞–ª–µ–Ω–æ" });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});



/**
 * @swagger
 * /stops:
 *   post:
 *     summary: –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑—É–ø–∏–Ω–∫—É (—Ä—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è)
 *     tags: [Admin]
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               route_id:
 *                 type: integer
 *               name:
 *                 type: string
 *               latitude:
 *                 type: number
 *                 example: 50.4601
 *               longitude:
 *                 type: number
 *                 example: 30.523
 *               order_index:
 *                 type: integer
 *     responses:
 *       201:
 *         description: –ó—É–ø–∏–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞
 *       400:
 *         description: –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
 *       500:
 *         description: –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
router.post("/stops",  authMiddleware, isAdmin, async (req, res) => {
    try {
        const { route_id, name, latitude, longitude, order_index } = req.body;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—Å—ñ –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω—ñ
        if (!route_id || !name || !latitude || !longitude || !order_index) {
            return res.status(400).json({ error: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
        }

        // –î–æ–¥–∞—î–º–æ –∑—É–ø–∏–Ω–∫—É –¥–æ –ë–î
        await sql.query`
            INSERT INTO Stops (route_id, name, latitude, longitude, order_index)
            VALUES (${route_id}, ${name}, ${latitude}, ${longitude}, ${order_index})`;

        res.status(201).json({ message: "–ó—É–ø–∏–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞" });
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–∫–∏:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /stops/{id}:
 *   delete:
 *     summary: –í–∏–¥–∞–ª–∏—Ç–∏ –∑—É–ø–∏–Ω–∫—É –ø–æ ID
 *     tags: [Admin]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: –ó—É–ø–∏–Ω–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ
 *       404:
 *         description: –ó—É–ø–∏–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
 *       500:
 *         description: –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
router.delete("/stops/:id", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { id } = req.params;

        const result = await sql.query`DELETE FROM Stops WHERE id = ${id}`;
        if (result.rowsAffected[0] === 0) {
            return res.status(404).json({ error: "–ó—É–ø–∏–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        res.status(200).json({ message: "–ó—É–ø–∏–Ω–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ" });
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑—É–ø–∏–Ω–∫–∏:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/** ---------- üìå USERS (–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ) ---------- **/

/**
 * @swagger
 * /users:
 *   get:
 *     summary: –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
 *     tags: [Admin]
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
router.get("/users", authMiddleware, isAdmin, async (req, res) => {
    try {
        const result = await sql.query`SELECT id, username, role FROM Users`;
        res.json(result.recordset);
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /users/{id}:
 *   delete:
 *     summary: –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
 *     tags: [Admin]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–æ
 */
router.delete("/users/:id", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        await sql.query`DELETE FROM Users WHERE id = ${id}`;
        res.status(200).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–æ" });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/** ---------- üìå VEHICLES (–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç) ---------- **/

/**
 * @swagger
 * /vehicles:
 *   get:
 *     summary: –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
 *     tags: [Admin]
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏—Ö –∑–∞—Å–æ–±—ñ–≤
 */
router.get("/vehicles", authMiddleware, isAdmin, async (req, res) => {
    try {
        const result = await sql.query`SELECT * FROM Vehicles`;
        res.json(result.recordset);
    } catch (error) {
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /vehicles:
 *   post:
 *     summary: –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –∑–∞—Å—ñ–± (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
 *     tags: [Admin]
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               route_id:
 *                 type: integer
 *               type:
 *                 type: string
 *               number:
 *                 type: string
 *               status:
 *                 type: string
 *     responses:
 *       201:
 *         description: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π
 */
router.post("/vehicles", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { route_id, type, number, status } = req.body;
        if (!route_id || !type || !number || !status) {
            return res.status(400).json({ error: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
        }

        await sql.query`
            INSERT INTO Vehicles (route_id, type, number, status)
            VALUES (${route_id}, ${type}, ${number}, ${status})`;

        res.status(201).json({ message: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π" });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


/**
 * @swagger
 * /vehicles/{id}:
 *   delete:
 *     summary: –í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –∑–∞—Å—ñ–± (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
 *     tags: [Admin]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤–∏–¥–∞–ª–µ–Ω–æ
 */
router.delete("/vehicles/:id", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        await sql.query`DELETE FROM Vehicles WHERE id = ${id}`;
        res.status(200).json({ message: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤–∏–¥–∞–ª–µ–Ω–æ" });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});



module.exports = router;
