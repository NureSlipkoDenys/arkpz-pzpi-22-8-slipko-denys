const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { sql } = require("./db");

const authMiddleware = require("./authMiddleware");
const router = express.Router();
const SECRET_KEY = process.env.JWT_SECRET;

router.use(express.json());

/**
 * @swagger
 * /api/users:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 *     tags: [Users]
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 *       403:
 *         description: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
router.get("/users", authMiddleware, async (req, res) => {
    try {
        if (req.user.role !== "admin") {
            return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
        }

        const result = await sql.query`SELECT id, username, role FROM Users`;
        res.json(result.recordset);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /auth/register:
 *   post:
 *     summary: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *               password:
 *                 type: string
 *               role:
 *                 type: string
 *     responses:
 *       201:
 *         description: –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
 */
router.post("/register", async (req, res) => {
    try {
        const { username, password } = req.body;
        if (!username || !password) {
            return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const pool = await poolPromise;
        await pool.request()
            .input("username", sql.NVarChar, username)
            .input("password_hash", sql.NVarChar, hashedPassword)
            .input("role", sql.NVarChar, "user")
            .query("INSERT INTO Users (username, password_hash, role) VALUES (@username, @password_hash, @role)");

        res.status(201).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /auth/login:
 *   post:
 *     summary: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 *       401:
 *         description: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å
 */
router.post("/login", async (req, res) => {
    try {
        const { username, password } = req.body;
        if (!username || !password) {
            return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        const pool = await poolPromise;
        const result = await pool.request()
            .input("username", sql.NVarChar, username)
            .query("SELECT * FROM Users WHERE username = @username");

        const user = result.recordset[0];
        if (!user || !(await bcrypt.compare(password, user.password_hash))) {
            return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
        }

        const token = jwt.sign(
            { id: user.id, username: user.username, role: user.role },
            SECRET_KEY,
            { expiresIn: "2h" }
        );
        res.json({ token });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /auth/me:
 *   get:
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 *     tags: [Authentication]
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
router.get("/me", async (req, res) => {
    try {
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            return res.status(401).json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
        }

        const token = authHeader.split(" ")[1];
        const decoded = jwt.verify(token, SECRET_KEY);
        res.json(decoded);
    } catch (error) {
        res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });
    }
});

/**
 * @swagger
 * /api/routes:
 *   post:
 *     summary: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
 *     tags: [Routes]
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 example: "–ú–∞—Ä—à—Ä—É—Ç 1"
 *               start_point:
 *                 type: string
 *                 example: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"
 *               end_point:
 *                 type: string
 *                 example: "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π –≤–æ–∫–∑–∞–ª"
 *     responses:
 *       201:
 *         description: –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
router.post("/routes", async (req, res) => {
    try {
        const { name, start_point, end_point } = req.body;
        if (!name || !start_point || !end_point) {
            return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        await sql.query`
            INSERT INTO Routes (name, start_point, end_point)
            VALUES (${name}, ${start_point}, ${end_point})
        `;

        res.status(201).json({ message: "–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /api/stops:
 *   post:
 *     summary: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
 *     tags: [Stops]
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               route_id:
 *                 type: integer
 *                 example: 1
 *               name:
 *                 type: string
 *                 example: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ X"
 *               latitude:
 *                 type: number
 *                 format: float
 *                 example: 50.4601
 *               longitude:
 *                 type: number
 *                 format: float
 *                 example: 30.5230
 *               order_index:
 *                 type: integer
 *                 example: 3
 *     responses:
 *       201:
 *         description: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
router.post("/stops", async (req, res) => {
    try {
        const { route_id, name, latitude, longitude, order_index } = req.body;
        if (
            !route_id ||
            !name ||
            latitude === undefined ||
            longitude === undefined ||
            order_index === undefined
        ) {
            return res.status(400).json({
                error:
                    "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã (route_id, name, latitude, longitude, order_index)"
            });
        }

        console.log(
            `üöè –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: route_id=${route_id}, name=${name}, latitude=${latitude}, longitude=${longitude}, order_index=${order_index}`
        );

        const result = await sql.query`
            INSERT INTO Stops (route_id, name, latitude, longitude, order_index)
            VALUES (${route_id}, ${name}, ${latitude}, ${longitude}, ${order_index})
        `;

        console.log("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:", result);
        res.status(201).json({ message: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞" });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

/**
 * @swagger
 * /api/vehicles:
 *   post:
 *     summary: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ
 *     tags: [Vehicles]
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               route_id:
 *                 type: integer
 *                 example: 2
 *               type:
 *                 type: string
 *                 example: "–¢—Ä–æ–ª–ª–µ–π–±—É—Å"
 *               number:
 *                 type: string
 *                 example: "AA1234BB"
 *               status:
 *                 type: string
 *                 enum: [–ù–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ, –í –ø—É—Ç–∏]
 *                 example: "–ù–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"
 *     responses:
 *       201:
 *         description: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
router.post("/vehicles", async (req, res) => {
    try {
        const { route_id, type, number, status } = req.body;
        if (!route_id || !type || !number || !status) {
            return res.status(400).json({
                error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã (route_id, type, number, status)"
            });
        }

        await sql.query`
            INSERT INTO Vehicles (route_id, type, number, status)
            VALUES (${route_id}, ${type}, ${number}, ${status})
        `;

        res.status(201).json({ message: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

module.exports = router;
