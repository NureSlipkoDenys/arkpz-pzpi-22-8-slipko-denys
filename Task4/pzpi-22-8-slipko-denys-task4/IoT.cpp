#include <WiFi.h>
#include <HTTPClient.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

// Wi-Fi –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const char* ssid = "Wokwi-GUEST";
const char* password = "";

// MQTT –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const char* mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;
const char* mqtt_topic = "esp32/gps";
WiFiClient espClient;
PubSubClient client(espClient);

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
const char* serverUrl = "http://localhost:5000/api/vehicle-locations"; 

// –ü—ñ–Ω–∏ —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
#define TRIG_PIN 5
#define ECHO_PIN 18

// –ë–∞–∑–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
float baseLatitude = 50.4501;
float baseLongitude = 30.5234;
int vehicle_id = 1;  

void setupWiFi() {
    Serial.println("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WiFi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\n‚úÖ WiFi –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!");
}

void reconnectMQTT() {
    while (!client.connected()) {
        Serial.println("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MQTT...");
        if (client.connect("ESP32Client")) {
            Serial.println("‚úÖ MQTT –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!");
        } else {
            Serial.print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è. –ö–æ–¥: ");
            Serial.println(client.state());
            delay(5000);
        }
    }
}

float getDistance() {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    float duration = pulseIn(ECHO_PIN, HIGH);
    return duration * 0.034 / 2; // –í—ñ–¥—Å—Ç–∞–Ω—å —É —Å–º
}

void sendGPSData() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ùå WiFi –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
        return;
    }

    float distance = getDistance();

    // –°–∏–º—É–ª—è—Ü—ñ—è GPS-–∑–º—ñ–Ω–∏
    float latitude = baseLatitude + (distance * 0.0001);
    float longitude = baseLongitude + (distance * 0.0001);

    StaticJsonDocument<200> jsonDoc;
    jsonDoc["vehicle_id"] = vehicle_id;
    jsonDoc["latitude"] = latitude;
    jsonDoc["longitude"] = longitude;

    char jsonBuffer[200];
    serializeJson(jsonDoc, jsonBuffer);

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ MQTT
    client.publish(mqtt_topic, jsonBuffer);
    Serial.println("üì° GPS-–¥–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ —á–µ—Ä–µ–∑ MQTT");

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ HTTP
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");
    int httpResponseCode = http.POST(jsonBuffer);
    
    if (httpResponseCode > 0) {
        Serial.print("‚úÖ HTTP –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: ");
        Serial.println(httpResponseCode);
    } else {
        Serial.print("‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP-–∑–∞–ø–∏—Ç—É: ");
        Serial.println(httpResponseCode);
    }

    http.end();
}

void setup() {
    Serial.begin(115200);
    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);
    setupWiFi();
    client.setServer(mqtt_server, mqtt_port);
}

void loop() {
    if (!client.connected()) {
        reconnectMQTT();
    }
    client.loop();
    sendGPSData();
    delay(5000);
}
